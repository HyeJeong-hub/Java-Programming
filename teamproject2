package 기말과제;

import java.awt.Color;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.io.File;
import java.io.IOException;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class finalproject extends JFrame {
   
   public finalproject() {
       setTitle("루피의 쿠키 굽기 대작전");
       setSize(1024, 768);
       setDefaultCloseOperation(EXIT_ON_CLOSE);
       setLocationRelativeTo(null);
       DrawingPanel panel = new DrawingPanel();
       add(panel);
       panel.addMouseListener(panel.getMouseListener());
       setVisible(true);

       playBackgroundMusic("C:\\Users\\dpazm\\eclipse-workspace\\project\\src\\기말과제\\background.wav");  // 배경음악 재생 시작
   }

   private Clip clip;

   private void playBackgroundMusic(String filePath) {
       try {
           File audioFile = new File(filePath);
           AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
           clip = AudioSystem.getClip();
           clip.open(audioStream);
           clip.loop(Clip.LOOP_CONTINUOUSLY); // 무한 반복 재생
           clip.start();
       } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
           e.printStackTrace();
           System.out.println("배경음악 재생 실패");
       }
   }

   
   
   
    public static void main(String[] args) {
        new finalproject();
    }

    class DrawingPanel extends JPanel {
       private boolean isStartScreen = true;
       private int loopyX = 100;      // 루피 X 위치 초기값
        private int loopyY = 300;      // 루피 Y 위치 초기값 (기존 300 그대로)
        private int loopySpeed = 10; // 이동 속도
        private boolean moveLeft = false;
        private boolean moveRight = false;
        private int loopyDirection = 1; // 1: 오른쪽 이동, -1: 왼쪽 이동
        private int bakingLevel1 = 0;
        private int bakingLevel2 = 0;
        private int steamOffset = 0;
        private boolean oven1Open = false;
        private boolean oven2Open = false;
        private Rectangle oven1Rect = new Rectangle(580, 20, 180, 130);
        private Rectangle oven2Rect = new Rectangle(780, 20, 180, 130);
        private boolean moveUp = false;
        private boolean moveDown = false;
        private boolean cookie1OnPlate = false;
        private boolean cookie2OnPlate = false;
        private boolean pororoEating = false;
        private int eatCookieIndex = 0;
        private int score = 0;
        private int remainingTime = 60;
        private javax.swing.Timer countdownTimer;
        private boolean isGameOver = false; // 게임 종료 상태 체크

        


        public DrawingPanel() {
            setDoubleBuffered(true);
            setFocusable(true);           // 이걸 꼭 추가해야 키 입력 받습니다
            requestFocusInWindow();
            
            // 타이머 생성만 하고 시작하지 않음
            countdownTimer = new javax.swing.Timer(1000, e -> {
                if (remainingTime > 0) {
                    remainingTime--;
                } else {
                    countdownTimer.stop();
                    isGameOver = true;  // 게임 종료 상태로 전환
                }
                repaint();
            });

            // countdownTimer.start(); <- 이 줄을 제거 (게임 시작할 때 시작하도록)

            addKeyListener(new java.awt.event.KeyAdapter() {
               
                @Override
                public void keyPressed(java.awt.event.KeyEvent e) {
                    switch (e.getKeyCode()) {
                        case java.awt.event.KeyEvent.VK_LEFT:
                            moveLeft = true;
                            break;
                        case java.awt.event.KeyEvent.VK_RIGHT:
                            moveRight = true;
                            break;
                        case java.awt.event.KeyEvent.VK_UP:
                            moveUp = true;
                            break;
                        case java.awt.event.KeyEvent.VK_DOWN:
                            moveDown = true;
                            break;
                    }
                }
                

                @Override
                public void keyReleased(java.awt.event.KeyEvent e) {
                    switch (e.getKeyCode()) {
                        case java.awt.event.KeyEvent.VK_LEFT:
                            moveLeft = false;
                            break;
                        case java.awt.event.KeyEvent.VK_RIGHT:
                            moveRight = false;
                            break;
                        case java.awt.event.KeyEvent.VK_UP:
                            moveUp = false;
                            break;
                        case java.awt.event.KeyEvent.VK_DOWN:
                            moveDown = false;
                            break;
                    }
                }
            });

            Timer timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    // 좌우 이동 기존 코드 유지
                    if (moveLeft) {
                        loopyX -= loopySpeed;
                        if (loopyX < 0) loopyX = 0;
                    }
                    if (moveRight) {
                        loopyX += loopySpeed;
                        if (loopyX > getWidth() - 200) loopyX = getWidth() - 200;
                    }

                    // 새로 추가: 위아래 이동 처리
                    if (moveUp) {
                        loopyY -= loopySpeed;
                        if (loopyY < 0) loopyY = 0; // 위쪽 경계 제한
                    }
                    if (moveDown) {
                        loopyY += loopySpeed;
                        if (loopyY > getHeight() - 300) loopyY = getHeight() - 300; // 아래쪽 경계 제한 (적절히 조절)
                    }

                    // 기존 빵 굽기, 스팀 애니메이션 유지
                    if (!oven1Open && bakingLevel1 < 180) bakingLevel1 += 2;
                    if (!oven2Open && bakingLevel2 < 180) bakingLevel2 += 2;
                    steamOffset = (steamOffset + 3) % 40;

                    repaint();
                }
            }, 0, 80);
        }
        
        private void restartGame() {
            isGameOver = false;
            isStartScreen = true;
            score = 0;
            remainingTime = 60;  // 60초로 리셋
            loopyX = 100;
            loopyY = 300;
            moveLeft = moveRight = moveUp = moveDown = false;
            oven1Open = oven2Open = false;
            cookie1OnPlate = cookie2OnPlate = false;
            bakingLevel1 = bakingLevel2 = 0;
            eatCookieIndex = 0;
            pororoEating = false;

            countdownTimer.stop(); // 기존 타이머 정지
            // 타이머는 다음에 시작 화면에서 클릭할 때 시작됨
            repaint();
        }


        public MouseListener getMouseListener() {
            return new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    if (isStartScreen) {
                        isStartScreen = false;
                        countdownTimer.start(); // 게임 시작할 때 타이머 시작
                        repaint();
                        return;
                    }
                    if (isGameOver) {
                        restartGame();  // 게임 리셋
                        return;
                    }


                    Point p = e.getPoint();

                    if (oven1Rect.contains(p)) {
                        oven1Open = !oven1Open;
                        if (oven1Open && loopyX >= 500 && loopyX <= 700) {
                            cookie1OnPlate = true;
                            startEating(1);  // Pororo가 쿠키1 먹기 시작
                        }
                    } else if (oven2Rect.contains(p)) {
                        oven2Open = !oven2Open;
                        if (oven2Open && loopyX >= 700 && loopyX <= 900) {
                            cookie2OnPlate = true;
                            startEating(2);  // Pororo가 쿠키2 먹기 시작
                        }
                    }
                }
            };
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            if (isStartScreen) {
                drawStartScreen(g);
                return;
            }

            if (isGameOver) {
                drawGameOverScreen(g); // 게임 종료화면 출력
                return;
            }
            
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

            drawBackground(g2);
            drawPororo(g2);
            drawTable(g2);
            drawOven(g2, 580, 20, bakingLevel1, oven1Open);
            drawOven(g2, 780, 20, bakingLevel2, oven2Open);
            drawLoopy(g2);
            g2.setColor(Color.BLACK);
            g2.setFont(new Font("맑은고딕", Font.BOLD, 20));
            g2.drawString("점수: " + score, 30, 40);
            g2.drawString("남은 시간: " + remainingTime + "초", 30, 70);


            g2.dispose();
        }
        
        private void drawGameOverScreen(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(new Color(30, 30, 30));
            g2.fillRect(0, 0, getWidth(), getHeight());

            g2.setFont(new Font("맑은 고딕", Font.BOLD, 50));
            g2.setColor(Color.WHITE);
            g2.drawString("게임 종료!", getWidth() / 2 - 150, getHeight() / 2 - 50);

            g2.setFont(new Font("맑은 고딕", Font.BOLD, 30));
            g2.setColor(Color.YELLOW);
            g2.drawString("최종 점수: " + score, getWidth() / 2 - 100, getHeight() / 2 + 10);

            g2.setFont(new Font("맑은 고딕", Font.PLAIN, 20));
            g2.setColor(Color.LIGHT_GRAY);
            g2.drawString("화면을 클릭하면 다시 시작합니다", getWidth() / 2 - 150, getHeight() / 2 + 60);
        }


        private void drawStartScreen(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setColor(new Color(255, 248, 230));
            g2.fillRect(0, 0, getWidth(), getHeight());

            try {
                BufferedImage image = ImageIO.read(new File("D:\\2-1\\java\\start.png"));
                g2.drawImage(image.getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH), 0, 0, this);
            } catch (IOException ex) {
                g2.setColor(Color.RED);
                g2.drawString("이미지를 불러오지 못했습니다", 400, 400);
            }
        

 
        }
        
        private void drawOven(Graphics2D g2, int x, int y, int bakingLevel, boolean isOpen) {
            g2.setColor(new Color(50, 50, 50));
            g2.fillRoundRect(x, y, 180, 130, 20, 20);

            g2.setColor(new Color(30, 30, 30));
            g2.fillRect(x + 10, y + 10, 160, 20);

            g2.setColor(Color.GREEN);
            g2.setFont(new Font("Consolas", Font.BOLD, 14));
            g2.drawString("200°C", x + 120, y + 25);

            for (int i = 0; i < 3; i++) {
                g2.setColor(Color.GRAY);
                g2.fillOval(x + 20 + i * 20, y + 15, 10, 10);
                g2.setColor(Color.WHITE);
                g2.drawOval(x + 20 + i * 20, y + 15, 10, 10);
            }

            if (isOpen) {
                g2.setColor(new Color(180, 200, 220, 160));
                g2.fillRoundRect(x + 30, y + 110, 120, 15, 10, 10);
                g2.setColor(Color.BLACK);
                g2.drawRoundRect(x + 30, y + 110, 120, 15, 10, 10);

                g2.setColor(new Color(120, 120, 120));
                g2.fillRoundRect(x + 45, y + 55, 90, 50, 10, 10);
                int startX = x + 50;
                int startY = y + 60;
                for (int row = 0; row < 2; row++) {
                    for (int col = 0; col < 2; col++) {
                        int cx = startX + col * 40;
                        int cy = startY + row * 20;
                        drawCookie(g2, cx, cy, bakingLevel);
                    }
                }
                g2.setColor(new Color(200, 200, 200, 100));
                for (int i = 0; i < 2; i++) {
                    int sx = x + 60 + i * 40;
                    int sy = y + 40 - (steamOffset + i * 10);
                    g2.drawArc(sx, sy, 15, 30, 0, 180);
                }
            } else {
                g2.setColor(new Color(180, 200, 220, 160));
                g2.fillRoundRect(x + 40, y + 50, 100, 60, 15, 15);
                g2.setColor(Color.BLACK);
                g2.drawRoundRect(x + 40, y + 50, 100, 60, 15, 15);
            }
        }

        private void drawCookie(Graphics2D g2, int x, int y, int bakingLevel) {
            Color light = new Color(245 - bakingLevel / 3, 200 - bakingLevel / 4, 150 - bakingLevel / 5);
            Color dark = new Color(190 - bakingLevel / 2, 120 - bakingLevel / 3, 60 - bakingLevel / 5);
            GradientPaint gp = new GradientPaint(x, y, light, x + 20, y + 20, dark);
            g2.setPaint(gp);
            g2.fillOval(x, y, 20, 20);
            g2.setColor(new Color(100, 70, 30, 100));
            g2.drawOval(x, y, 20, 20);
        }
        
        

        private void drawPororo(Graphics g) {
            int x = 700;
            int y = 430;
            double s = 0.8;

            // 얼굴 뒤 노랑
            g.setColor(new Color(255, 228, 0));
            g.fillOval(x, y, (int)(180 * s), (int)(180 * s));

            // 앞머리 반짝이
            g.setColor(new Color(255, 255, 255, 80));
            g.fillArc(x + (int)(20 * s), y + (int)(10 * s), (int)(60 * s), (int)(40 * s), 0, 180);
         
            // 헬멧 파랑 + P자
            g.setColor(new Color(0, 102, 204));
            g.fillOval(x + (int)(65 * s), y + (int)(10 * s), (int)(50 * s), (int)(50 * s));
            g.setColor(Color.ORANGE);
            g.fillRoundRect(x + (int)(78 * s), y + (int)(20 * s), (int)(25 * s), (int)(30 * s), 10, 10);
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, (int)(20 * s)));
            g.drawString("P", x + (int)(84 * s), y + (int)(43 * s));
        
            // 얼굴 흰색
            g.setColor(Color.WHITE);
            g.fillOval(x + (int)(25 * s), y + (int)(50 * s), (int)(130 * s), (int)(130 * s));

            // 안경 주황
            g.setColor(new Color(255, 94, 0));
            g.fillOval(x + (int)(35 * s), y + (int)(80 * s), (int)(50 * s), (int)(50 * s));
            g.fillOval(x + (int)(95 * s), y + (int)(80 * s), (int)(50 * s), (int)(50 * s));

            // 안경 흰색 안쪽
            g.setColor(new Color(240, 240, 240));
            g.fillOval(x + (int)(43 * s), y + (int)(88 * s), (int)(34 * s), (int)(34 * s));
            g.fillOval(x + (int)(103 * s), y + (int)(88 * s), (int)(34 * s), (int)(34 * s));

            // 눈동자
            g.setColor(Color.BLACK);
            g.fillOval(x + (int)(60 * s), y + (int)(100 * s), (int)(10 * s), (int)(10 * s));
            g.fillOval(x + (int)(120 * s), y + (int)(100 * s), (int)(10 * s), (int)(10 * s));
            g.setColor(Color.WHITE);
            g.fillOval(x + (int)(63 * s), y + (int)(102 * s), (int)(3 * s), (int)(3 * s));
            g.fillOval(x + (int)(123 * s), y + (int)(102 * s), (int)(3 * s), (int)(3 * s));

            // 안경 연결대
            g.setColor(new Color(255, 94, 0));
            g.fillRect(x + (int)(85 * s), y + (int)(95 * s), (int)(10 * s), (int)(10 * s));
            g.fillRoundRect(x + (int)(30 * s), y + (int)(95 * s), (int)(10 * s), (int)(6 * s), 3, 3);
            g.fillRoundRect(x + (int)(145 * s), y + (int)(95 * s), (int)(10 * s), (int)(6 * s), 3, 3);
            // 헬멧 파란 앞머리 띠 (눈 위로 아치형)
            g.setColor(new Color(0, 102, 204));
            g.fillArc(x + (int)(55 * s), y + (int)(48 * s), (int)(70 * s), (int)(30 * s), 0, 180);
            // 부리 (입)
            g.setColor(new Color(255, 221, 0));
            g.fillOval(x + (int)(75 * s), y + (int)(130 * s), (int)(30 * s), (int)(20 * s));
            g.setColor(new Color(255, 180, 0));
            g.drawArc(x + (int)(75 * s), y + (int)(130 * s), (int)(30 * s), (int)(20 * s), 0, -180);

            // 몸통 파란색
            g.setColor(new Color(0, 102, 204));
            g.fillRoundRect(x + (int)(30 * s), y + (int)(160 * s), (int)(120 * s), (int)(90 * s), 40, 40);
            g.setColor(Color.WHITE);
            g.drawLine(x + (int)(90 * s), y + (int)(165 * s), x + (int)(90 * s), y + (int)(240 * s));
            g.setColor(new Color(0, 90, 190));
            g.drawRect(x + (int)(110 * s), y + (int)(200 * s), (int)(20 * s), (int)(15 * s));

            // 팔
            g.setColor(new Color(255, 228, 0));
            if (pororoEating) {
                int handXOffset = (eatCookieIndex == 1) ? 20 : 60;
                g.fillOval(x - (int)(10 * s) + handXOffset, y + (int)(170 * s), (int)(30 * s), (int)(30 * s));
            } else {
                g.fillOval(x - (int)(10 * s), y + (int)(170 * s), (int)(30 * s), (int)(30 * s));
                g.fillOval(x + (int)(140 * s), y + (int)(170 * s), (int)(30 * s), (int)(30 * s));
            }

            // 팔 그림자 효과
            g.setColor(Color.LIGHT_GRAY);
            g.fillRoundRect(x + (int)(2 * s), y + (int)(145 * s), (int)(6 * s), (int)(30 * s), 4, 4);
            for (int i = -1; i <= 1; i++) {
                g.fillRoundRect(x + (int)(i * 6 * s), y + (int)(140 * s), (int)(4 * s), (int)(8 * s), 2, 2);
            }

            // 발
            g.setColor(Color.WHITE);
            g.fillOval(x + (int)(23 * s), y + (int)(238 * s), (int)(34 * s), (int)(34 * s));
            g.fillOval(x + (int)(88 * s), y + (int)(238 * s), (int)(34 * s), (int)(34 * s));
            g.setColor(new Color(255, 228, 0));
            g.fillOval(x + (int)(25 * s), y + (int)(240 * s), (int)(30 * s), (int)(30 * s));
            g.fillOval(x + (int)(90 * s), y + (int)(240 * s), (int)(30 * s), (int)(30 * s));
        }
     // 🍪 Pororo가 쿠키 먹기 시작
        private void startEating(int cookieIndex) {
            if (pororoEating) return;
            pororoEating = true;
            eatCookieIndex = cookieIndex;
            
            score += 10;

            new Timer().schedule(new TimerTask() {
                @Override
                public void run() {
                    pororoEating = false;
                    if (cookieIndex == 1) cookie1OnPlate = false;
                    else if (cookieIndex == 2) cookie2OnPlate = false;
                    repaint();
                }
            }, 2000);
        }

        private void drawLoopy(Graphics g) {
            int offsetX = loopyX;  // 고정값 대신 위치 변수 사용
            int offsetY = loopyY;
            double scale = 0.75;
            Graphics2D g2 = (Graphics2D) g;
            g2.scale(scale, scale);
            g.setColor(Color.pink);
            g.fillOval(offsetX + 55, offsetY + 0, 25, 25);
            g.fillOval(offsetX + 170, offsetY + 0, 25, 25);
            g.setColor(new Color(102, 0, 51));
            g.fillOval(offsetX + 90, offsetY + 235, 30, 25);
            g.fillOval(offsetX + 140, offsetY + 235, 30, 25);
            // 오른손에 접시 추가 (루피가 팔로 접시를 받치는 느낌)
            g.setColor(new Color(230, 230, 230)); // 접시 색
            g.fillOval(offsetX + 190, offsetY + 130, 50, 15); // 약간 위쪽에 위치
            g.setColor(Color.DARK_GRAY);
            g.drawOval(offsetX + 190, offsetY + 130, 50, 15);

            g.setColor(Color.pink);
            g.fillOval(offsetX + 70, offsetY + 118, 120, 120);
            g.fillOval(offsetX + 60, offsetY + 140, 140, 100);
            g.setColor(Color.white);
            g.fillOval(offsetX + 90, offsetY + 155, 80, 90);
            g.setColor(Color.pink);
            g.fillOval(offsetX + 45, offsetY + 140, 60, 25);
            g.fillOval(offsetX + 155, offsetY + 140, 60, 25);
            g.fillOval(offsetX + 50, offsetY + 0, 150, 150);
            g.fillOval(offsetX + 40, offsetY + 60, 170, 90);
            g.setColor(new Color(241, 95, 95));
            g.fillOval(offsetX + 70, offsetY + 60, 20, 10);
            g.fillOval(offsetX + 160, offsetY + 60, 20, 10);
            g.setColor(new Color(102, 0, 51));
            g.fillOval(offsetX + 110, offsetY + 50, 30, 20);
            g.fillOval(offsetX + 111, offsetY + 53, 28, 20);
            g.setColor(Color.black);
            g.fillOval(offsetX + 90, offsetY + 40, 12, 12);
            g.setColor(Color.white);
            g.fillOval(offsetX + 92, offsetY + 42, 4, 4);
            g.setColor(Color.black);
            g.fillArc(offsetX + 150, offsetY + 40, 15, 10, -50, 280);
            g.setColor(Color.white);
            g.fillOval(offsetX + 113, offsetY + 56, 4, 4);
            g.setColor(Color.white);
            g.fillRoundRect(offsetX + 115, offsetY + 85, 20, 10, 10, 10);
            g.setColor(Color.black);
            g.fillArc(offsetX + 105, offsetY + 80, 40, 8, 130, 280);
            g.setColor(Color.white);
            g.fillArc(offsetX + 63, offsetY + 4, 15, 15, 55, 180);
            g.fillArc(offsetX + 170, offsetY + 4, 15, 15, 310, 180);
            g2.scale(1 / scale, 1 / scale);
        }

        private void drawBackground(Graphics g) {
            g.setColor(new Color(245, 240, 230));
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(new Color(220, 200, 180));
            g.fillRect(0, getHeight() - 200, getWidth(), 200);
            g.setColor(new Color(190, 170, 150));
            for (int i = 0; i < getWidth(); i += 40) {
                g.fillRect(i, getHeight() - 200, 20, 200);
            }
        }

        private void drawTable(Graphics g) {
           g.setColor(new Color(90, 30, 10));
            g.fillRoundRect(670, 580, 200, 40, 20, 20);
            int legTop = 620;
            int legHeight = 40;
            g.fillRect(680, legTop, 8, legHeight);
            g.fillRect(715, legTop, 8, legHeight);
            g.fillRect(790, legTop, 8, legHeight);
            g.fillRect(855, legTop, 8, legHeight);

   // 접시 추가
            g.setColor(new Color(230, 230, 230)); // 밝은 회색
            g.fillOval(730, 575, 80, 20);        // 접시 타원
            g.setColor(Color.DARK_GRAY);
            g.drawOval(730, 575, 80, 20);        // 접시 테두리

            // 쿠키 표시 (오븐에서 꺼냈을 때만)
            Graphics2D g2 = (Graphics2D) g;
            if (cookie1OnPlate) {
                drawCookie(g2, 750, 570, bakingLevel1); // 접시 위에 쿠키 그림
            }
            if (cookie2OnPlate) {
                drawCookie(g2, 780, 570, bakingLevel2);
            }
        }
    }
} 
